<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.5">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>REPO_BRANCH</name>
          <description></description>
          <defaultValue>cicd-pipeline</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPO_CRED_ID</name>
          <description></description>
          <defaultValue>cbeaa05f-0c27-49d5-8ccf-7844af8a49f2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPO_URL</name>
          <description></description>
          <defaultValue>https://Saikrishna_Gogula@bitbucket.org/pwcadc/adcclientms.git</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REGISTRY_URL</name>
          <description></description>
          <defaultValue>https://index.docker.io/v1/</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>node {

        def DOCKER_USER, DOCKER_PASSWORD
        withCredentials([[
        $class: &apos;UsernamePasswordMultiBinding&apos;,
        credentialsId: &apos;d26e215d-5e39-42e6-ba6f-9f832984a4ed&apos;,
        usernameVariable: &apos;username&apos;,
        passwordVariable: &apos;password&apos;]]) {
        DOCKER_USER = &quot;${env.username}&quot;
        DOCKER_PASSWORD = &quot;${env.password}&quot;
        }
        
        docker.image(&apos;easydevops/cicd:java&apos;).inside
    {
                stage &apos;Stage 1:Checking out GitHub Repo&apos;
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/cicd-pipeline&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;cbeaa05f-0c27-49d5-8ccf-7844af8a49f2&apos;, url: &apos;https://Saikrishna_Gogula@bitbucket.org/pwcadc/adcclientms.git&apos;]]])
                //git url: &quot;$REPO_URL&quot;

                stage &apos;Stage 2:Run build&apos;
                sh &quot;/var/devops/cicd/scripts/build.sh&quot;
                stash includes: &apos;build/libs/*,Dockerfile&apos;, name: &apos;dockerBuild&apos;

                stage &apos;Stage 3: Run test and Coverage&apos;
                sh &quot;gradle -b pipeline.gradle test jacocoTestReport&quot;
            
                stage &apos;Stage 4: Run Scan&apos;
                sh &quot;gradle -b pipeline.gradle findbugsMain checkstyleMain pmdMain&quot;
                
                stage &apos;Stage 5: Code Coverage&apos;
                step([$class: &apos;JacocoPublisher&apos;, classPattern: &apos;build/classes&apos;, exclusionPattern: &apos;**/*Test*.class&apos;, execPattern: &apos;build/jacoco/test.exec&apos;, inclusionPattern: &apos;**/*.class&apos;, maximumClassCoverage: &apos;50&apos;, maximumInstructionCoverage: &apos;30&apos;, maximumLineCoverage: &apos;30&apos;, maximumMethodCoverage: &apos;50&apos;, sourcePattern: &apos;/src/main/java&apos;])

                stage &apos;Stage 6: Static Code Analysis&apos;
                step([$class: &apos;CheckStylePublisher&apos;, pattern: &apos;build/reports/checkstyle/*.xml&apos;])
                step([$class: &apos;FindBugsPublisher&apos;, pattern: &apos;build/reports/findbugs/*.xml&apos;])
                step([$class: &apos;PmdPublisher&apos;, pattern: &apos;build/reports/pmd/*.xml&apos;])

                //stage &apos;Stage 7: Archive Artifacts&apos;
                //step([$class: &apos;ArtifactArchiver&apos;, artifacts: &apos;build/libs/*.war&apos;, fingerprint: true])

                stage &apos;Stage 8: Unit Tests&apos;
                step([$class: &apos;JUnitResultArchiver&apos;, testResults: &apos;build/test-results/*.xml&apos;])
                
                stage &apos;Stage 9: Whitesource&apos;
                //sh &apos;sudo npm install -g whitesource&apos;
                sh &apos;whitesource run&apos;
                
                stage &apos;Stage 10: Sonarqube analysis&apos;
                sh &apos;gradle -b pipeline.gradle sonarqube&apos;
                
                stage &apos;Stage 11: HPE Security Fortify Scan&apos;
                step([$class: &apos;FodBuilder&apos;, filePattern: &apos;&quot;&quot;&apos;, assessmentTypeId: &apos;170&apos;, applicationName: &apos;US -ASR - ADC&apos;, releaseName: &quot;V2.0.0&quot;, technologyStack: &apos;JAVA/J2EE&apos;, languageLevel: &apos;1.8&apos;, runOpenSourceAnalysis: false, isExpressScan: false, isExpressAudit: false, doPollFortify: false, doPrettyLogOutput: false, includeAllFiles: false, includeThirdParty: false])

                stage &apos;Stage 12: Black Duck Scan&apos;
                hub_scan bomUpdateMaxiumWaitTime: &apos;5&apos;, dryRun: false, hubProjectName: &apos;adcclientms&apos;, hubProjectVersion: &apos;1.0.0&apos;, hubVersionDist: &apos;EXTERNAL&apos;, hubVersionPhase: &apos;PLANNING&apos;, scanMemory: &apos;4096&apos;, scans: [[scanTarget: &apos;&apos;]], shouldGenerateHubReport: false

                stage &apos;Stage 13: Artifactory&apos;
                def server = Artifactory.server(&apos;pwc-gcp-artifactory&apos;)
                def buildInfo = Artifactory.newBuildInfo()
                server.publishBuildInfo(buildInfo)
    } 
  
      stage &apos;Stage 15:Build docker image&apos;
      unstash &apos;dockerBuild&apos;
      // Build final image using the Dockerfile and the docker.build command
      // This container only contains the packaged war, not the source or interim build steps
      def adcImg = docker.build(&quot;saikrishnagogula/adcclientms:${env.BUILD_TAG}&quot;)
      
      stage &apos;Stage 16: Publish to DockerHub&apos;
      withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;d26e215d-5e39-42e6-ba6f-9f832984a4ed&apos;,usernameVariable: &apos;USERNAME&apos;,passwordVariable: &apos;PASSWORD&apos;]]) {
      sh &quot;docker login -u $env.USERNAME -p $env.PASSWORD https://index.docker.io/v1/&quot;
      sh &quot;docker push saikrishnagogula/adcclientms:${env.BUILD_TAG}&quot;
      }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>